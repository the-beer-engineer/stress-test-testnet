'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Util = function () {
  function Util(restURL) {
    _classCallCheck(this, Util);

    this.restURL = restURL;
  }

  _createClass(Util, [{
    key: 'validateAddress',
    value: function validateAddress(address) {
      // Return information about the given bitcoin address.
      //
      // Arguments:
      // 1. "address"     (string, required) The bitcoin address to validate
      //
      // Result:
      // {
      //   "isvalid" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.
      //   "address" : "address", (string) The bitcoin address validated
      //   "scriptPubKey" : "hex",       (string) The hex encoded scriptPubKey generated by the address
      //   "ismine" : true|false,        (boolean) If the address is yours or not
      //   "iswatchonly" : true|false,   (boolean) If the address is watchonly
      //   "isscript" : true|false,      (boolean) If the key is a script
      //   "pubkey" : "publickeyhex",    (string) The hex value of the raw public key
      //   "iscompressed" : true|false,  (boolean) If the address is compressed
      //   "account" : "account"         (string) DEPRECATED. The account associated with the address, "" is the default account
      //   "timestamp" : timestamp,        (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)
      //   "hdkeypath" : "keypath"       (string, optional) The HD keypath if the key is HD and available
      //   "hdmasterkeyid" : "<hash160>" (string, optional) The Hash160 of the HD master pubkey
      // }
      return _axios2.default.get(this.restURL + 'util/validateAddress/' + address).then(function (response) {
        return response.data;
      }).catch(function (error) {
        return JSON.stringify(error.response.data.error.message);
      });
    }
  }]);

  return Util;
}();

exports.default = Util;